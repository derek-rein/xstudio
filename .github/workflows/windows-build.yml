name: Windows Build
on:
  workflow_dispatch:

env:
  QT_VERSION: 5.15.2
  BUILD_TYPE: Release
  INSTALL_PREFIX: D:/a/_temp/install
  PYTHON_VERSION: '3.10'
  VCPKG_ROOT: D:/a/xstudio/xstudio/build/vcpkg
  VCPKG_DEFAULT_BINARY_CACHE: D:/a/xstudio/xstudio/build/vcpkg/bincache
  VCPKG_FEATURE_FLAGS: binarycaching,manifests
  VCPKG_MAX_CONCURRENCY: 4

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Enable long paths
      shell: powershell
      run: |
        New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
        -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

    - name: Create build directory
      run: |
        mkdir -p build
      shell: bash

    - name: Setup vcpkg binary cache
      run: |
        mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
      shell: bash

    - name: Configure vcpkg binary sources
      run: |
        echo "VCPKG_BINARY_SOURCES=clear;default,readwrite;files,${{ env.VCPKG_DEFAULT_BINARY_CACHE }},readwrite" >> $GITHUB_ENV
      shell: bash

    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-v2
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '${{ env.PYTHON_VERSION }}'

    - name: Configure vcpkg environment
      run: |
        echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV
        echo "VCPKG_FORCE_SYSTEM_BINARIES=1" >> $GITHUB_ENV
        echo "PYTHON_HOME=${{ env.pythonLocation }}" >> $GITHUB_ENV
        echo "VCPKG_KEEP_ENV_VARS=VCPKG_FORCE_SYSTEM_BINARIES" >> $GITHUB_ENV
      shell: bash

    - name: Setup vcpkg
      run: |
        cd build
        # Check if vcpkg directory exists and is valid
        if [ ! -f "vcpkg/bootstrap-vcpkg.sh" ]; then
          rm -rf vcpkg
          git clone https://github.com/Microsoft/vcpkg.git
        fi
        
        # Make bootstrap script executable and run it
        chmod +x vcpkg/bootstrap-vcpkg.sh
        ./vcpkg/bootstrap-vcpkg.sh
        
        # Create custom triplet file with proper architecture setting
        mkdir -p vcpkg/triplets
        cat > vcpkg/triplets/custom-x64-windows.cmake << EOF
set(VCPKG_TARGET_ARCHITECTURE x64)
set(VCPKG_CRT_LINKAGE dynamic)
set(VCPKG_LIBRARY_LINKAGE dynamic)
set(VCPKG_BUILD_TYPE release)
set(VCPKG_CMAKE_SYSTEM_NAME Windows)
EOF
        
        # Update baseline
        ./vcpkg/vcpkg x-update-baseline --add-initial-baseline
      shell: bash

    - name: Configure and Build
      shell: pwsh
      run: |
        cd build
        
        # Create CMakeSettings.json for custom configuration
        $cmakeSettings = @{
          configurations = @(
            @{
              name = "${{ env.BUILD_TYPE }}"
              generator = "Visual Studio 17 2022"
              architecture = @{
                value = "x64"
                strategy = "set"
              }
            }
          )
        } | ConvertTo-Json -Depth 10
        
        Set-Content -Path "CMakeSettings.json" -Value $cmakeSettings
        
        # Configure with CMake
        cmake `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DCMAKE_BUILD_TYPE="${{ env.BUILD_TYPE }}" `
          -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_PREFIX }}" `
          -DQt5_DIR="C:/Qt/${{ env.QT_VERSION }}/msvc2019_64/lib/cmake/Qt5" `
          -DPYTHON_EXECUTABLE="${{ env.pythonLocation }}/python.exe" `
          -DVCPKG_TARGET_TRIPLET=custom-x64-windows `
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
          -DVCPKG_HOST_TRIPLET=x64-windows `
          -DVCPKG_OVERLAY_TRIPLETS="${{ env.VCPKG_ROOT }}/triplets" `
          ..
        
        if ($LASTEXITCODE -ne 0) {
            if (Test-Path "CMakeFiles/CMakeError.log") {
                Get-Content CMakeFiles/CMakeError.log
            } else {
                Write-Host "CMakeError.log not found. Build failed with exit code $LASTEXITCODE"
            }
            exit $LASTEXITCODE
        }
        
        # Build
        cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 4
        
        if ($LASTEXITCODE -ne 0) {
            exit $LASTEXITCODE
        }
        
        # Install
        cmake --install . --config ${{ env.BUILD_TYPE }}