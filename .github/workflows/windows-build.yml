name: Windows Build

on:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  workflow_dispatch:

env:
  QT_VERSION: 5.15.2
  BUILD_TYPE: Release
  INSTALL_PREFIX: D:/a/_temp/install
  PYTHON_VERSION: '3.10'
  VCPKG_ROOT: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\vcpkg"

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Enable long paths
      shell: powershell
      run: |
        New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
        -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '${{ env.PYTHON_VERSION }}'

    - name: Configure vcpkg environment
      run: |
        echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV
        echo "VCPKG_FORCE_SYSTEM_BINARIES=1" >> $GITHUB_ENV
        echo "PYTHON_HOME=${{ env.pythonLocation }}" >> $GITHUB_ENV
      shell: bash

    - name: Verify Python version and set vcpkg Python path
      run: |
        python --version
        if (-not (python --version).Contains("3.10")) {
          echo "::error::Wrong Python version detected"
          exit 1
        }
        echo "VCPKG_PYTHON=${{ env.pythonLocation }}\python.exe" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Install aqtinstall
      run: |
        python -m pip install --upgrade pip
        pip install aqtinstall==3.1.*

    - name: Install Qt
      run: |
        aqt install-qt `
          windows desktop ${{ env.QT_VERSION }} win64_msvc2019_64 `
          --outputdir C:\Qt `
          --modules qtcharts qtwebengine
        
        aqt install-tool `
          windows desktop tools_qtcreator `
          --outputdir C:\Qt
        
        aqt install-tool `
          windows desktop tools_qtcreator_debug `
          --outputdir C:\Qt
        
        aqt install-tool `
          windows desktop tools_qtcreator_kits_and_debuggers `
          --outputdir C:\Qt
      shell: pwsh

    - name: Add Qt to PATH
      run: echo "C:\Qt\${{ env.QT_VERSION }}\msvc2019_64\bin" >> $GITHUB_PATH
      shell: bash

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1
      with:
        vs-version: '17.0'
        msbuild-architecture: x64

    - name: Setup VS Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64
        sdk: '10.0.22000.0'

    - name: Configure and Build
      shell: pwsh
      run: |
        # Create build directory
        mkdir build
        cd build
        
        # Configure with CMake
        cmake .. `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
          -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_PREFIX }}" `
          -DQt5_DIR="C:/Qt/${{ env.QT_VERSION }}/msvc2019_64/lib/cmake/Qt5"
          -DPYTHON_EXECUTABLE="${{ env.VCPKG_PYTHON }}" `
          -DVCPKG_TARGET_TRIPLET=x64-windows `
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
        
        # Build
        cmake --build . --config ${{ env.BUILD_TYPE }}
        
        # Install
        cmake --install . --config ${{ env.BUILD_TYPE }}

    - name: Package
      run: |
        # Create dist directory
        mkdir dist
        
        # Copy installation to dist
        cp -r "${{ env.INSTALL_PREFIX }}/*" dist/
        
        # Copy Qt dependencies
        windeployqt --release --dir dist/bin dist/bin/xstudio.exe
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xstudio-windows
        path: dist/
        compression-level: 9
